package mapstuff;

import graphsearch.AStar;
import graphsearch.Coordinate;
import graphsearch.Distance;
import graphsearch.Heuristic;
import graphsearch.Node;
import ilist.IList;

import java.util.ArrayList;
import java.util.Random;

import maybe.Maybe;

import org.testng.Assert;
import org.testng.annotations.Test;

import rp.robotics.mapping.MapUtils;
import rp.robotics.mapping.RPLineMap;


public class GraphTest {
	
	public GraphTest() {
		
	}
	
	
	@Test
	public void testPathFind() {
		
		RPLineMap lineMap = MapUtils.create2015Map1();
		gridMap gridMap = new gridMap(8, 12, 15, 15, 30, lineMap);

		Graph<Coordinate> graph = new Graph<Coordinate>(lineMap, gridMap);
		ArrayList<Coordinate> coords = graph.createCoordinates();
		//System.out.println(coords.size());
		ArrayList<Node<Coordinate>> nodes = graph.createNodes(coords);
		
		for (int i = 0; i < nodes.size(); i++) {
			Node<Coordinate> n = (Node<Coordinate>) nodes.get(i);
			Coordinate c = n.contents();
			int x1 = ((Coordinate) c).getX();
			int y1 = ((Coordinate) c).getY();
			//System.out.println(x1 +", " +y1);
			int x2 = x1 + 1;
			int y2 = y1 + 1;
			
			int x3 = x1 - 1;
			int y3 = y1 - 1;
			
			if (gridMap.isValidTransition(x1, y1, x1, y2) == true) {
				Coordinate p = new Coordinate (x1, y2);
				Node<Coordinate> s = graph.nodeWith(p);
				n.addSuccessor(s);
			}
			
			if (gridMap.isValidTransition(x1, y1, x2, y1) == true) {
				Coordinate p = new Coordinate (x2, y1);
				Node<Coordinate> s = graph.nodeWith(p);
				n.addSuccessor(s);
			}

			if (gridMap.isValidTransition(x1, y1, x1, y3) == true) {
				Coordinate p = new Coordinate (x1, y3);
				Node<Coordinate> s = graph.nodeWith(p);
				n.addSuccessor(s);
			}
			
			if (gridMap.isValidTransition(x1, y1, x3, y1) == true) {
				Coordinate p = new Coordinate (x3, y1);
				Node<Coordinate> s = graph.nodeWith(p);
				n.addSuccessor(s);
			}
		}
		
		for(int i = 0 ; i < 10; i++) {
			
			Random r = new Random();
			
			int x1 = r.nextInt(12);
			int y1 = r.nextInt(8);
			int x2 = r.nextInt(12);
			int y2 = r.nextInt(8);
			
			AStar<Coordinate> astar = new AStar<Coordinate>();
			
			Node<Coordinate> startNode = graph.nodeWith(new Coordinate(x1, y1));
			
			while (gridMap.isObstructed(x1, y1) == true) {
				x1 = r.nextInt(12);
				y1 = r.nextInt(8);
				startNode = graph.nodeWith(new Coordinate(x1,y1));
			}
			
			Node<Coordinate> findNode = graph.nodeWith(new Coordinate(x2, y2));
			
			while (gridMap.isObstructed(x2, y2) == true) {
				x2 = r.nextInt(12);
				y2 = r.nextInt(8);
				findNode = graph.nodeWith(new Coordinate(x2,y2));
				
			}
			
			
			Heuristic<Coordinate> h = new Heuristic<Coordinate>(startNode, findNode);
			Distance<Coordinate> d = new Distance<Coordinate>(startNode, findNode);

			Maybe<IList<Node<Coordinate>>> path = astar.findPathFrom(startNode, findNode, h, d);
			
			IList<Node<Coordinate>> path2 = path.fromMaybe();
			System.out.println(path2);

			Assert.assertTrue(gridMap.isValidTransition(x1, y1, x1, y1));
			
			for (int o = 0 ; o < path2.size() ; o++) {	
				
				Node<Coordinate> b = path2.getHead().fromMaybe();
					
				Coordinate c1 = b.contents();
				
				Maybe<IList<Node<Coordinate>>> tail = path2.getTail();
				
				Node<Coordinate> t = tail.fromMaybe().getHead().fromMaybe();
				
				Coordinate c2 = t.contents();
				
				int _x1 = c1.getX();
				int _y1 = c1.getY();
				int _x2 = c2.getX();
				int _y2 = c2.getY();
				
				Assert.assertTrue(gridMap.isValidTransition(_x1, _y1, _x2, _y2));
	
				Maybe<IList<Node<Coordinate>>> newtail = tail.fromMaybe().getTail();
				
				Node<Coordinate> g = newtail.fromMaybe().getHead().fromMaybe();
				
				Assert.assertFalse(gridMap.isObstructed(x1, y1));
				Assert.assertFalse(gridMap.isObstructed(x2, y2));
						
			}
		}
	}
	
}